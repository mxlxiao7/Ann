前提：
   LinearAlloc限制：
        在安装时可能会提示INSTALL_FAILED_DEXOPT。产生的原因就是LinearAlloc限制，DVM中的LinearAlloc是一个固
        定的缓存区，当方法数过多超出了缓存区的大小时会报错。为了解决65536限制和LinearAlloc限制，从而产生了Dex分
        包方案。Dex分包方案主要做的是在打包时将应用代码分成多个Dex，将应用启动时必须用到的类和这些类的直接引用类
        放到主Dex中，其他代码放到次Dex中。当应用启动时先加载主Dex，等到应用启动后再动态的加载次Dex，从而缓解了主
        Dex的65536限制和LinearAlloc限制。

   解决此问题的Dex分包方案主要有两种：
        1）Google官方multidex方案
            不足：
            1.在冷启动时因为需要安装DEX文件，如果DEX文件过大时，处理时间过长，很容易引发ANR（Application Not Responding）；
            2.采用MultiDex方案的应用可能不能在低于Android 4.0 (API level 14) 机器上启动，这个主要是因为Dalvik linearAlloc的一个bug (Issue 22586);
            3.采用MultiDex方案的应用因为需要申请一个很大的内存，在运行时可能导致程序的崩溃，这个主要是因为Dalvik linearAlloc 的一个限制(Issue 78035). 这个限制在 Android 4.0 (API level 14)已经增加了, 应用也有可能在低于 Android 5.0 (API level 21)版本的机器上触发这个限制；

        2) 美团Dex自动拆包和动态加载方案
            解决的问题：
            1.在打包过程中如何产生多个的DEX包？
            2.如果做到动态加载，怎么决定哪些DEX动态加载呢？
            3.如果启动后在工作线程中做动态加载，如果没有加载完而用户进行页面操作需要使用到动态加载DEX中的class怎么办？

        3）facebook
        4）微信
        5) https://www.open-open.com/lib/view/open1452264136714.html
备注：
    使用google指定主dex类，必须关闭R8编辑器，并且minSdkVersion小于21